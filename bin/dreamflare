#!/usr/bin/env ruby
####################################################################################
#
# Description: dreamflare - sync dreamhost DNS to cloudflare
#
#
# Author: David https://commscentral.net/
#
####################################################################################

# Load configuration (use relative to prevent loading in other places)
require_relative '../config.rb'

# set default path and
$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'dreamflare.rb'

#setup our namespace
include Dreamflare

#query dreamhost
dreamHost = DHAPIQuery.new(DHKEY)
dhResults = dreamHost.query('dns-list_records')

#query cloudflare
cloudFlare = CFAPIQuery.new(CFKEY,CFEMAIL)
cfResults = cloudFlare.query(CFZoneID,'dns_records');



#loop options

# for result in dhResults
#
#     puts result
# end


#dhResults.each {|value| puts value}


matchingDHZones = []

if dhResults['result'] == 'success'
    dhResults['data'].each do |dnsRecord|
        if(dnsRecord['zone'] == SearchZone)
             h = {'record' => dnsRecord['record'],'value' => dnsRecord['value'],'type' => dnsRecord['type']}
             matchingDHZones.push(h)
        end
    end
end

puts(matchingDHZones)


puts('--------------NOW CF ---------------')


matchingCFZones = []
if cfResults['success'] == true
  cfResults['result'].each do |dnsRecord|
      h = {'record' => dnsRecord['name'],'value' => dnsRecord['content'],'type' =>dnsRecord['type']}
      matchingCFZones.push(h)
  end
end
puts(matchingCFZones)

## TODO
# check if each record in dreamhost exists in CF and if they match
