#!/usr/bin/env ruby
####################################################################################
#
# Description: dreamflare - sync dreamhost DNS to cloudflare
#
#
# Author: David https://commscentral.net/
#
####################################################################################

# Load configuration (use relative to prevent loading in other places)
require_relative '../config.rb'

# set default path and
$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'dreamflare.rb'

#setup our namespace
include Dreamflare

#query dreamhost
dreamHost = DHAPIQuery.new(DHKEY)
dhResults = dreamHost.query('dns-list_records')

#query cloudflare
cloudFlare = CFAPIQuery.new(CFKEY,CFEMAIL)
cfResults = cloudFlare.query(CFZoneID,'dns_records');




matchingDHZones = []

if dhResults['result'] == 'success'
    dhResults['data'].each do |dnsRecord|
        if(dnsRecord['zone'] == SearchZone)
            if(dnsRecord['value'].count(" ") > 0)
                resultOfSplit = dnsRecord['value'].split
                if(resultOfSplit.length > 2 || dnsRecord['type'] == 'TXT')
                    puts("error we can't split a record from dreamhost. Its safest we skip this record bar risk a bad cloudflare update")
                    break
                else
                    priority = Integer(resultOfSplit[0]) rescue throw('unable to cast to interger the front value of the dns record from dreamhost')
                    h = {'record' => dnsRecord['record'],'value' => resultOfSplit[1].chomp('.'),'type' => dnsRecord['type'], 'priority' => Integer(resultOfSplit[0]) }
                end


            else
                h = {'record' => dnsRecord['record'],'value' => dnsRecord['value'].chomp('.'),'type' => dnsRecord['type']}
            end


            matchingDHZones.push(h)
        end
    end
end

#puts(matchingDHZones)


puts('--------------NOW CF ---------------')


matchingCFZones = []
if cfResults['success'] == true
  cfResults['result'].each do |dnsRecord|
      h = {'record' => dnsRecord['name'],'value' => dnsRecord['content'],'type' =>dnsRecord['type']}

      if(!dnsRecord['priority'].nil?)
        puts('priority is SET!')

        h['priority'] = dnsRecord['priority']
      end
      # h['priority'] =

      matchingCFZones.push(h)
  end
end
#puts(matchingCFZones)

puts('--------------NOW search for DH records in CF ---------------')

#loop for each source record
matchingDHZones.each do |dhRecord|

    #find any CF records that match on DNS name and record type
    searchResult = matchingCFZones.select{ |x| x["record"] == dhRecord['record'] and x['type'] == dhRecord['type'] }
    resultLength = searchResult.length

    if(resultLength == 0)
      #puts('create record')

      #call create record

    else #found match now what?
      puts(searchResult)

      #check match multiple records could have been returned
      if(resultLength > 1)

        puts('multiple records -- hard')
        # searchResult.each do |result|
        #
        #   if(dhRecord['value'] == result['value'])
        #     puts 'matched'
        #   else
        #     puts 'missed match'
        #   end
        #
        # end

        #search all dreamhost results to get their multiple cords
        searchDHResults = matchingDHZones.select{ |x| x["record"] == searchResult[0]["record"] and x["type"] == searchResult[0]["type"] }

        puts('-------start compare-------------')


        searchDHResults.each do |dhRecordItem|

            foundMatch = false
            searchResult.each do |cfRecordItem|
                if(dhRecordItem == cfRecordItem)
                    foundMatch = true
                end
            end

            #if we can't find a match better create!
            if(!foundMatch)
                puts("GO CREATE RECORD")
            else
                puts("no need to create duplicate record - already matches")
            end


        end

        puts(searchDHResults)
        puts(searchResult)


        puts('--------end compare------------')

      else
        puts('single record - easy')
        #puts (searchResult)
        #puts(searchResult[0]['value'])

        if(searchResult[0]['value'] != dhRecord['value'])
          puts "Records do not much - update required"

        else
          puts "records match - no action needed"

        end


      end


    end




    #puts("---------------")

end

## TODO
# check if each record in dreamhost exists in CF and if they match
